#BlueJ class context
comment0.target=Test_main
comment1.params=
comment1.target=Test_main()
comment10.params=
comment10.target=void\ testCrearUnaRecetaConContenido()
comment11.params=
comment11.target=void\ testImpresionRecetaFormato()
comment12.params=
comment12.target=void\ testVerificarArchivoVerificado()
comment13.params=
comment13.target=void\ testValidarReceta()
comment14.params=
comment14.target=void\ testEscrituraRecetaArchivo()
comment15.params=
comment15.target=void\ testEscrituraArhivoValidacion()
comment16.params=
comment16.target=void\ testEscrituraSobreArchivoExistente()
comment2.params=
comment2.target=void\ set()
comment3.params=
comment3.target=void\ setUp()
comment4.params=
comment4.target=void\ tearDown()
comment5.params=
comment5.target=void\ testIngresarReceta()
comment5.text=@Test\ \n\ \ \ \ public\ void\ test1()\ throws\ Exception{\n\ \ \ \ Receta\ a\ \=\ new\ Receta("nombre");\n\ \ \ \ Ingrediente\ i\ \=\ new\ Ingrediente(4,"litros","aceite");\n\ \ \ \ a\ \=\ mock(Receta.class);\n\ \ \ \ a.agregarIngrediente(i);\n\ \ \ \ when(a.agregarIngrediente(i)).thenReturn(true);\n\ \ \ \ System.out.println(a.toString());\n\ \ \ \ assertTrue(a.agregarIngrediente(i));\n}
comment6.params=
comment6.target=void\ testRecetaNulaInvalida()
comment7.params=
comment7.target=void\ testInvalidarRecetaNula()
comment8.params=
comment8.target=void\ testInvalidaRecetaInvalida()
comment9.params=
comment9.target=void\ testValidarUnaRecetaNula()
numComments=17
